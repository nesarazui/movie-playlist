{"version":3,"sources":["components/PlaylistPreview.js","components/Navigation.js","store.js","components/MovieSearch.js","components/DisplayMovieThumbnails.js","components/Home.js","components/ConfirmationFooter.js","components/Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["StyledBadge","withStyles","badge","right","top","border","padding","Badge","ConnectedToPlaylistPreview","connect","state","playlist","style","width","to","IconButton","aria-label","badgeContent","length","color","fontSize","useStyles","makeStyles","theme","root","flexGrow","title","display","position","Navigation","classes","className","AppBar","Toolbar","Typography","variant","noWrap","UPDATE_RESULTS","ADD_TO_PLAYLIST","REMOVE_FROM_PLAYLIST","initialState","searchResults","createStore","action","type","movieResults","playlistClone","movie","playlistCloneToUpdate","updatedPlaylist","filter","imdbID","ConnectedToMovieSearch","dispatch","updateMovieResults","movieData","useState","setTitle","debouncing","useCallback","debounce","letter","searchOMDB","a","axios","get","response","data","Error","Search","console","error","TextField","fullWidth","label","value","onChange","event","target","InputProps","startAdornment","InputAdornment","ConnectedToDisplayMovieThumbnails","addToPlaylist","addingToPlaylist","GridList","cols","map","GridListTile","onClick","cursor","src","Poster","alt","GridListTileBar","Title","subtitle","Year","Home","Grid","container","item","xs","ConfirmationFooter","id","ConnectedToPlaylist","removeFromPlaylist","playlistNum","removeItem","spacing","align","justify","direction","maxWidth","Button","startIcon","alert","App","Container","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.359c609b.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\nimport { Link } from \"react-router-dom\";\nimport Badge from \"@material-ui/core/Badge\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\n//This component renders the playlist icon along with a styled badge that reflects the current number of playlist items.\n//The playlist is accessed via props from the redux playlist state.\n\nconst StyledBadge = withStyles(() => ({\n  badge: {\n    right: -3,\n    top: 5,\n    border: `2px solid white`,\n    padding: \"0 4px\",\n  },\n}))(Badge);\n\nconst PlaylistPreview = ({ playlist }) => {\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Link to=\"/playlist\">\n        <IconButton aria-label=\"playlist\">\n          <StyledBadge badgeContent={playlist.length} color=\"secondary\">\n            <PlaylistPlayIcon color=\"secondary\" fontSize=\"large\" />\n          </StyledBadge>\n        </IconButton>\n      </Link>\n    </div>\n  );\n};\n\nconst mapState = (state) => ({\n  playlist: state.playlist,\n});\nconst ConnectedToPlaylistPreview = connect(mapState)(PlaylistPreview);\n\nexport default ConnectedToPlaylistPreview;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ConnectedToPlaylistPreview from \"./PlaylistPreview\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport Typography from \"@material-ui/core/Typography\";\n\n//This component renders the navigation bar that remains persistent across both of the existing routes ('/' and '/playlist')\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    display: \"block\",\n    flexGrow: 1,\n  },\n  playlist: {\n    position: \"relative\",\n  },\n}));\n\nconst Navigation = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link to=\"/\">\n            <HomeIcon color=\"secondary\" fontSize=\"large\" />\n          </Link>\n          <Typography variant=\"h6\" className={classes.title} noWrap>\n            The Movie Store\n          </Typography>\n          <div className={classes.playlist}>\n            <ConnectedToPlaylistPreview />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import { createStore } from \"redux\";\n\n//ACTION TYPES\nconst UPDATE_RESULTS = \"UPDATE_RESULTS\";\nconst ADD_TO_PLAYLIST = \"ADD_TO_PLAYLIST\";\nconst REMOVE_FROM_PLAYLIST = \"REMOVE_FROM_PLAYLIST\";\n\n//ACTION CREATORS\nexport const updateMovieResults = (movieResults) => ({\n  type: UPDATE_RESULTS,\n  movieResults,\n});\n\nexport const addToPlaylist = (movie) => ({\n  type: ADD_TO_PLAYLIST,\n  movie,\n});\n\nexport const removeFromPlaylist = (movie) => ({\n  type: REMOVE_FROM_PLAYLIST,\n  movie,\n});\n//INITIAL STATE\nconst initialState = {\n  searchResults: [],\n  playlist: [],\n};\n\n//REDUCER\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_RESULTS:\n      return { ...state, searchResults: action.movieResults };\n    case ADD_TO_PLAYLIST:\n      const playlistClone = [...state.playlist, action.movie];\n      return { ...state, playlist: playlistClone };\n    case REMOVE_FROM_PLAYLIST:\n      const playlistCloneToUpdate = [...state.playlist];\n      const updatedPlaylist = playlistCloneToUpdate.filter((movie) => {\n        if (movie.imdbID === action.movie.imdbID) {\n          return false;\n        } else {\n          return true;\n        }\n      });\n      return { ...state, playlist: updatedPlaylist };\n    default:\n      return state;\n  }\n};\n\nexport default createStore(reducer);\n","import React, { useState, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { updateMovieResults } from \"../store\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\n//This component renders the movie search bar, which involves a controlled form, utilizing useState to reflect input value.\n//Debouncing is used to limit API calls to OMDB by deferring the call by 1 second upon each keystroke.\n//Data received from OMDB is stored in Redux.\n//The resulting movie data is rendered in the DisplayMovieThumbnails component.\n\nconst MovieSearch = ({ updateMovieResults }) => {\n  const [title, setTitle] = useState(\"\");\n\n  const handleChange = (event) => {\n    let letter = event.target.value;\n    setTitle(letter);\n    if (letter.length !== 0) {\n      debouncing(letter);\n    }\n  };\n\n  const debouncing = useCallback(\n    debounce((letter) => searchOMDB(letter), 1000),\n    []\n  );\n\n  const searchOMDB = async (letter) => {\n    try {\n      const response = await axios.get(\n        `https://www.omdbapi.com/?apikey=6befe58e&s=${letter}`\n      );\n      if (response.data.Error) {\n        await updateMovieResults([{ Error: response.data.Error }]);\n      } else {\n        const movieData = response.data.Search;\n        await updateMovieResults(movieData);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <TextField\n      fullWidth\n      color=\"primary\"\n      label=\"Search For A Movie\"\n      type=\"search\"\n      variant=\"outlined\"\n      value={title}\n      onChange={handleChange}\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nconst mapDispatch = (dispatch) => ({\n  updateMovieResults: (movieData) => dispatch(updateMovieResults(movieData)),\n});\n\nconst ConnectedToMovieSearch = connect(null, mapDispatch)(MovieSearch);\nexport default ConnectedToMovieSearch;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addToPlaylist } from \"../store\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport Typography from \"@material-ui/core/Typography\";\n\n//  This component renders each movie's thumbnail image, title and year for all matching results. These results are retrieved from Redux from the 'searchResults' state.\n//  Clicking on any movie will add it to the playlist: this movie data is added to the 'playlist' state in redux.\n\nconst DisplayMovieThumbnails = ({ movieResults, addToPlaylist }) => {\n  const addingToPlaylist = async (movie) => {\n    await addToPlaylist(movie);\n  };\n\n  const displayMovieResults = () => {\n    if (!movieResults.length) {\n      return false;\n    }\n    if (movieResults[0].Error) {\n      return <div>{movieResults[0].Error}</div>;\n    }\n\n    if (movieResults.length) {\n      return (\n        <div>\n          <div className=\"container\">\n            <Typography variant=\"h7\">\n              {movieResults.length} Results Found: Click On A Movie To Add To\n              Playlist\n            </Typography>\n          </div>\n          <GridList cols={2}>\n            {movieResults.map((movie) => {\n              return (\n                <GridListTile\n                  key={movie.imdbID}\n                  cols={1}\n                  onClick={() => addingToPlaylist(movie)}\n                  style={{ cursor: \"pointer\", padding: \"10px\" }}\n                >\n                  <img src={movie.Poster} alt=\"thumbnail\" />\n                  <GridListTileBar\n                    title={movie.Title}\n                    subtitle={<span>{movie.Year}</span>}\n                  />\n                </GridListTile>\n              );\n            })}\n          </GridList>\n        </div>\n      );\n    }\n  };\n\n  return <div>{displayMovieResults()}</div>;\n};\n\nconst mapState = (state) => ({\n  movieResults: state.searchResults,\n});\n\nconst mapDispatch = (dispatch) => ({\n  addToPlaylist: (movie) => dispatch(addToPlaylist(movie)),\n});\n\nconst ConnectedToDisplayMovieThumbnails = connect(\n  mapState,\n  mapDispatch\n)(DisplayMovieThumbnails);\nexport default ConnectedToDisplayMovieThumbnails;\n","import ConnectedToMovieSearch from \"./MovieSearch\";\nimport ConnectedToDisplayMovieThumbnails from \"./DisplayMovieThumbnails\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//This component renders the two child components: MovieSearch and DisplayMovieThumbnails.\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <Grid container>\n        <Grid item xs={12}>\n          <ConnectedToMovieSearch />\n        </Grid>\n      </Grid>\n      <ConnectedToDisplayMovieThumbnails />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst ConfirmationFooter = () => {\n  return <div id=\"confirmationFooter\">My favorite color is purple</div>;\n};\n\nexport default ConfirmationFooter;\n","import { connect } from \"react-redux\";\nimport { removeFromPlaylist } from \"../store\";\nimport ConfirmationFooter from \"./ConfirmationFooter\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\n//This compoonent renders all items in playlist, the data for which is brought in from the redux playlist state. There is the option to remove any item from the playlist.\nconst Playlist = ({ playlist, removeFromPlaylist }) => {\n  const playlistNum = playlist.length;\n  const removeItem = async (movie) => {\n    await removeFromPlaylist(movie);\n  };\n\n  const checkout = () => {\n    alert(\"Playing Movies\");\n  };\n\n  const displayPlaylist = () => {\n    return playlist.map((item) => {\n      return (\n        <Grid item>\n          <div key={item.imdbID} className=\"container\">\n            <div>\n              <img\n                style={{ width: \"100%\", maxWidth: \"300px\" }}\n                src={item.Poster}\n                alt=\"thumbnail\"\n              ></img>\n            </div>\n\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<DeleteIcon />}\n              onClick={() => {\n                removeItem(item);\n              }}\n            >\n              Remove\n            </Button>\n          </div>\n        </Grid>\n      );\n    });\n  };\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      align=\"center\"\n      justify=\"center\"\n      direction=\"column\"\n    >\n      {playlist.length ? (\n        <Grid item>\n          <Grid item>\n            <div className=\"container\">\n              <Typography variant=\"h7\">\n                You have {playlistNum}\n                {playlistNum > 1 ? \" movies\" : \" movie\"} in your playlist\n              </Typography>\n            </div>\n          </Grid>\n          {displayPlaylist()}\n        </Grid>\n      ) : (\n        <Grid item>\n          <div className=\"container\">\n            <Typography variant=\"h7\">\n              There Are No Items In Your Playlist\n            </Typography>\n          </div>\n        </Grid>\n      )}\n      {playlistNum > 0 ? (\n        <div id=\"buttonStyle\">\n          <Button variant=\"contained\" color=\"primary\" onClick={checkout}>\n            Play All Movies\n          </Button>\n        </div>\n      ) : null}\n      <Typography variant=\"h7\">\n        <ConfirmationFooter />\n      </Typography>\n    </Grid>\n  );\n};\n\nconst mapState = (state) => ({\n  playlist: state.playlist,\n});\n\nconst mapDispatch = (dispatch) => ({\n  removeFromPlaylist: (movie) => dispatch(removeFromPlaylist(movie)),\n});\nconst ConnectedToPlaylist = connect(mapState, mapDispatch)(Playlist);\nexport default ConnectedToPlaylist;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport Home from \"./components/Home\";\nimport ConnectedToPlaylist from \"./components/Playlist\";\nimport Container from \"@material-ui/core/Container\";\n\nfunction App() {\n  return (\n    <Container maxWidth=\"lg\">\n      <div className=\"App\">\n        <Router>\n          <Navigation />\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/playlist\">\n            <ConnectedToPlaylist />\n          </Route>\n        </Router>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}